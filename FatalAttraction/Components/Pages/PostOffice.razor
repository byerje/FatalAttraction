@page "/postoffice"
@using Microsoft.SemanticKernel
@using Microsoft.SemanticKernel.ChatCompletion
@implements IDisposable
@rendermode InteractiveServer
@inject Kernel Kernel
@inject IChatCompletionService ChatService
@inject FatalAttraction.Services.ChatSessionState ChatState
@inject IJSRuntime JS

<PageTitle>Post Office</PageTitle>

<h1>Post Office</h1>

<img src="/images/postal-worker.png" alt="Edwin Pike" class="img-fluid rounded float-start me-3 mb-2" style="max-width:200px;" />

<p>Talk to the postman, Mr. Edwin Pike.</p>

<div style="display:flex; flex-direction:column; height:65vh; gap:0.5rem;">
    @if (!string.IsNullOrEmpty(ttsError))
    {
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            @ttsError
            <button type="button" class="btn-close" @onclick="() => ttsError = null"></button>
        </div>
    }
    
    <div style="flex:0 0 auto; display:flex; flex-direction:column; gap:0.25rem;">
        <textarea class="form-control"
          style="flex:1 1 auto; resize:vertical; max-height:20vh;"
          @bind="message"
          @bind:event="oninput"
          @ref="messageInput"
          @onkeydown="HandleKeyDown"
          placeholder="Speak or type your question and click the Ask button..."></textarea>
        <div style="display:flex; gap:0.5rem; justify-content:flex-start;">
            <button class="btn btn-primary" style="min-width:140px;" @onclick="Submit" @ref="askButton">Ask</button>
            <button class="btn @(isListening ? "btn-warning" : "btn-info")" style="min-width:140px;" @onclick="ToggleSpeechRecognition">
                @(isListening ? "ðŸŽ¤ Listening..." : "ðŸŽ¤ Speak")
            </button>
            <button class="btn btn-danger" style="min-width:140px;" @onclick="StopSpeech">Stop</button>
        </div>
        @if (!string.IsNullOrEmpty(speechError))
        {
            <div class="alert alert-danger alert-dismissible fade show mt-2" role="alert">
                @speechError
                <button type="button" class="btn-close" @onclick="() => speechError = null"></button>
            </div>
        }
    </div>

    <!-- Two-column region: Conversation (left) + Case Notes (right) -->
    <div style="flex:1 1 auto; display:flex; gap:0.75rem; min-height:0;">
        <!-- Conversation Card -->
        <div class="card shadow-sm" style="flex:2 1 0; display:flex; flex-direction:column; border-radius:0.5rem; min-height:0;">
            <div class="card-header fw-semibold">
                Conversation History:
            </div>
            <div class="card-body" style="overflow:auto; flex:1 1 auto; padding:0.75rem; background-color:#fff;" id="historyContainer">
                @foreach (var (role, content) in convo.AsEnumerable().Reverse())
                {
                    if (role == "system")
                    {
                        <div class="text-muted small mb-2">System: @content</div>
                    }
                    else if (role == "user")
                    {
                        <div class="mb-2"><strong>You:</strong> @((MarkupString)Markdig.Markdown.ToHtml(content))</div>
                    }
                    else
                    {
                        <div class="mb-2"><strong>Mr. Edwin Pike:</strong> @((MarkupString)Markdig.Markdown.ToHtml(content))</div>
                    }
                }
            </div>
        </div>

        <!-- Case Notes Card -->
        <div class="card shadow-sm" style="flex:1 1 0; display:flex; flex-direction:column; border-radius:0.5rem; min-height:0;">
            <div class="card-header fw-semibold">
                Case Notes:
            </div>
            <div class="card-body" style="display:flex; flex-direction:column; gap:0.5rem; padding:0.75rem;">
                <textarea class="form-control"
                        style="flex:1 1 auto; min-height:8rem; resize:vertical;"
                        @bind="Notes"
                        @bind:event="oninput"
                        placeholder="Write notes you want to see on every page..."></textarea>
            </div>
        </div>
    </div>
</div>

@code {
    private string message = string.Empty;
    private string response = string.Empty;
    ChatHistory history = new();
    private ElementReference messageInput;
    private ElementReference askButton;
    private List<(string role, string content)> convo = new();
    private bool isInteractiveRendered;
    private string Notes
    {
        get => ChatState.Notes;
        set => ChatState.Notes = value ?? string.Empty;
    }
    private string selectedVoice = "echo";  @* Male postman - friendly *@
    private float speed = 1.0f;
    private string? ttsError = null;
    private bool isListening = false;
    private string? speechError = null;
    private DotNetObjectReference<PostOffice>? dotNetHelper;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isInteractiveRendered = true;
            dotNetHelper = DotNetObjectReference.Create(this);
        }

        return Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
        // Retrieve any previous conversation
        convo = ChatState.GetOrCreateConvo("mailman");

        // Give shared background
        foreach(var prompt in ChatState.Prompts)
        {
            history.AddSystemMessage(prompt);
        }

        // Set the persona for this character
        history.AddSystemMessage("You are Edwin Pike, the postal worker. You act indifferent but youâ€™re nosy and like having leverage. Youâ€™ve kept a letter Evelyn mailed to the mayor, Ben Langford, â€” itâ€™s a love letter. Donâ€™t reveal it easily; let the player coax it out through suspicion or bribes.");
    }

    private async Task Submit()
    {
        if (!string.IsNullOrEmpty(message))
        {
            try
            {
                history.AddUserMessage(message);
                convo.Add(("user", message));
                await ClearMessage();

                response = "";
                ttsError = null;
                var chunks = ChatService.GetStreamingChatMessageContentsAsync(history);
                await foreach (var chunk in chunks)
                {
                    response += chunk;
                    StateHasChanged();
                }                
                history.AddAssistantMessage(response);
                convo.Add(("assistant", response));
                await InvokeAsync(StateHasChanged);
                
                // Play the speech after response is complete
                await PlaySpeech(response);
                
                if (isInteractiveRendered)
                {
                    await messageInput.FocusAsync();
                }
            }
            catch
            {
                convo.Add(("system", "There was an issue processing your message, please try again."));
            }
        }
    }

    private async Task PlaySpeech(string textToSpeak)
    {
        if (!string.IsNullOrWhiteSpace(textToSpeak))
        {
            try
            {
                await StopSpeech();
                await JS.InvokeVoidAsync("ttsPlayer.play", textToSpeak, selectedVoice, speed);
            }
            catch (Exception ex)
            {
                ttsError = $"TTS Error: {ex.Message}";
                Console.WriteLine($"TTS Error: {ex}");
                StateHasChanged();
            }
        }
    }

    private async Task StopSpeech()
    {
        try
        {
            await JS.InvokeVoidAsync("ttsPlayer.stop");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Stop TTS Error: {ex}");
        }
    }

    private async Task ToggleSpeechRecognition()
    {
        if (!isInteractiveRendered)
        {
            speechError = "Page not fully loaded yet";
            return;
        }

        if (isListening)
        {
            await StopListening();
        }
        else
        {
            await StartListening();
        }
    }

    private async Task StartListening()
    {
        try
        {
            speechError = null;
            var success = await JS.InvokeAsync<bool>("speechRecognition.startListening", dotNetHelper);
            if (success)
            {
                isListening = true;
                StateHasChanged();
            }
            else
            {
                speechError = "Speech recognition not supported in this browser";
            }
        }
        catch (Exception ex)
        {
            speechError = $"Speech recognition error: {ex.Message}";
            Console.WriteLine($"Speech recognition error: {ex}");
        }
    }

    private async Task StopListening()
    {
        try
        {
            await JS.InvokeVoidAsync("speechRecognition.stopListening");
            isListening = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Stop listening error: {ex}");
        }
    }

    [JSInvokable]
    public async void OnSpeechRecognized(string transcript)
    {
        Console.WriteLine($"Speech recognized: {transcript}");
        message = transcript;
        isListening = false;
        await InvokeAsync(StateHasChanged);
        
        if (isInteractiveRendered)
        {
            await askButton.FocusAsync();
        }
    }

    [JSInvokable]
    public void OnSpeechError(string error)
    {
        Console.WriteLine($"Speech error: {error}");
        speechError = $"Speech recognition error: {error}";
        isListening = false;
        InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async void OnSpeechEnded()
    {
        Console.WriteLine("Speech recognition ended");
        isListening = false;
        await InvokeAsync(StateHasChanged);
        
        if (isInteractiveRendered)
        {
            await askButton.FocusAsync();
        }
    }

    public async void Dispose()
    {
        // Stop audio when navigating away from the page
        await StopSpeech();
        await StopListening();
        dotNetHelper?.Dispose();
    }

    private async Task ClearMessage()
    {
        message = string.Empty;
        await InvokeAsync(StateHasChanged);
        if (isInteractiveRendered)
        {
            await messageInput.FocusAsync();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await Submit();
            await InvokeAsync(StateHasChanged);
        }
    }

    private MarkupString GetResponseMarkup()
    {
        if (string.IsNullOrWhiteSpace(response))
            return new MarkupString(string.Empty);

        var html = Markdig.Markdown.ToHtml(response);
        return new MarkupString(html);
    }
}