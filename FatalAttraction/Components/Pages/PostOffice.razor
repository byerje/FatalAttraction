@page "/postoffice"
@using Microsoft.SemanticKernel
@using Microsoft.SemanticKernel.ChatCompletion
@rendermode InteractiveServer
@inject Kernel Kernel
@inject IChatCompletionService ChatService
@inject FatalAttraction.Services.ChatSessionState ChatState

<PageTitle>Post Office</PageTitle>

<h1>Post Office</h1>

<img src="/images/postal-worker.png" alt="Edwin Pike" class="img-fluid rounded float-start me-3 mb-2" style="max-width:200px;" />

<p>Talk to the postman, Mr. Edwin Pike.</p>

<div style="display:flex; flex-direction:column; height:65vh; gap:0.5rem;">
    <div style="flex:0 0 auto; display:flex; flex-direction:column; gap:0.25rem;">
        <textarea class="form-control"
          style="flex:1 1 auto; resize:vertical; max-height:20vh;"
          @bind="message"
          @bind:event="oninput"
          @ref="messageInput"
          @onkeydown="HandleKeyDown"
          placeholder="Type your question and click the Ask button..."></textarea>
        <div style="display:flex; gap:0.5rem; justify-content:flex-start;">
            <button class="btn btn-primary" @onclick="Submit">Ask</button>
            <button class="btn btn-secondary" @onclick="ClearMessage">Clear</button>
        </div>
    </div>

    <!-- Two-column region: Conversation (left) + Case Notes (right) -->
    <div style="flex:1 1 auto; display:flex; gap:0.75rem; min-height:0;">
        <!-- Conversation Card -->
        <div class="card shadow-sm" style="flex:2 1 0; display:flex; flex-direction:column; border-radius:0.5rem; min-height:0;">
            <div class="card-header fw-semibold">
                Conversation History:
            </div>
            <div class="card-body" style="overflow:auto; flex:1 1 auto; padding:0.75rem; background-color:#fff;" id="historyContainer">
                @foreach (var (role, content) in convo.AsEnumerable().Reverse())
                {
                    if (role == "system")
                    {
                        <div class="text-muted small mb-2">System: @content</div>
                    }
                    else if (role == "user")
                    {
                        <div class="mb-2"><strong>You:</strong> @((MarkupString)Markdig.Markdown.ToHtml(content))</div>
                    }
                    else
                    {
                        <div class="mb-2"><strong>NPC:</strong> @((MarkupString)Markdig.Markdown.ToHtml(content))</div>
                    }
                }
            </div>
        </div>

        <!-- Case Notes Card -->
        <div class="card shadow-sm" style="flex:1 1 0; display:flex; flex-direction:column; border-radius:0.5rem; min-height:0;">
            <div class="card-header fw-semibold">
                Case Notes:
            </div>
            <div class="card-body" style="display:flex; flex-direction:column; gap:0.5rem; padding:0.75rem;">
                <textarea class="form-control"
                        style="flex:1 1 auto; min-height:8rem; resize:vertical;"
                        @bind="Notes"
                        @bind:event="oninput"
                        placeholder="Write notes you want to see on every page..."></textarea>
            </div>
        </div>
    </div>
</div>

@code {
    private string message = string.Empty;
    private string response = string.Empty;
    ChatHistory history = new();
    private ElementReference messageInput;
    private List<(string role, string content)> convo = new();
    private bool isInteractiveRendered;
    private string Notes
    {
        get => ChatState.Notes;
        set => ChatState.Notes = value ?? string.Empty;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isInteractiveRendered = true;
        }

        return Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
        // Retrieve any previous conversation
        convo = ChatState.GetOrCreateConvo("mailman");

        // Give background info about the murder
        history.AddSystemMessage("In the quiet town of Larkspur Hollow, an attractive little town, the body of Evelyn Cross, a beloved actress who once performed at the local theater, is found dead in the park at dawn. The townsfolk whisper it was a crime of passion — but everyone seems to have been attracted to Evelyn in some way, and everyone’s hiding something. The player must interview each character to uncover motives, lies, and secrets — and ultimately identify the killer. Cause of Death: Blunt trauma to the head. Time of Death: Between 9 PM and midnight. Last seen: Leaving the Theater after rehearsal. Theme: Each suspect’s “attraction” (romantic, financial, power, or admiration) drove their behavior.");

        // Set the persona for this character
        history.AddSystemMessage("You are Edwin Pike, the postal worker. You act indifferent but you’re nosy and like having leverage. You’ve kept a letter Evelyn mailed to the mayor, Beatrice Langford, — it’s a love letter. Don’t reveal it easily; let the player coax it out through suspicion or bribes.");
    }

    private async Task Submit()
    {
        history.AddUserMessage(message);
        convo.Add(("user", message));
        if (!string.IsNullOrEmpty(message))
        {
            response = "";
            var chunks = ChatService.GetStreamingChatMessageContentsAsync(history);
            await foreach (var chunk in chunks)
            {
                response += chunk;
                StateHasChanged();
            }
            history.AddAssistantMessage(response);
            convo.Add(("assistant", response));
            await InvokeAsync(StateHasChanged);
            if (isInteractiveRendered)
            {
                await messageInput.FocusAsync();
            }
        
            await ClearMessage();
        }
    }

    private async Task ClearMessage()
    {
        message = string.Empty;
        await InvokeAsync(StateHasChanged);
        if (isInteractiveRendered)
        {
            await messageInput.FocusAsync();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await Submit();
            await InvokeAsync(StateHasChanged);
        }
    }

    private MarkupString GetResponseMarkup()
    {
        if (string.IsNullOrWhiteSpace(response))
            return new MarkupString(string.Empty);

        var html = Markdig.Markdown.ToHtml(response);
        return new MarkupString(html);
    }
}