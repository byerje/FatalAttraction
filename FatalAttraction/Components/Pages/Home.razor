@page "/"
@rendermode InteractiveServer
@using FatalAttraction.Services
@inject FatalAttraction.Services.ChatSessionState ChatState
@inject FatalAttraction.Services.StoryScenarioService ScenarioService
@inject IJSRuntime JS
@implements IDisposable

<PageTitle>Home</PageTitle>

<h1>Fatal Attraction!</h1>

@* Scenario Selection *@
<div class="mb-3">
    <label for="scenarioSelect" class="form-label"><strong>Choose Your Mystery:</strong></label>
    <select id="scenarioSelect" class="form-select" style="max-width: 400px;" @onchange="OnScenarioChanged">
        @foreach (var scenario in availableScenarios)
        {
            <option value="@scenario.Id" selected="@(scenario.Id == ChatState.CurrentScenarioId)">
                @scenario.Title
            </option>
        }
    </select>
</div>

@* Display the story introduction text *@
<p>@introText</p>

<div style="margin-bottom: 1rem;">
    <button class="btn btn-primary" @onclick="ReadIntro">Read Intro</button>
    <button class="btn btn-danger" @onclick="StopSpeech">Stop</button>
    @if (!string.IsNullOrEmpty(ttsError))
    {
        <div class="alert alert-danger mt-2">@ttsError</div>
    }
</div>
<hr />
<p><b>Police Report Details:</b></p>
<div style="display: flex; align-items: flex-start; gap: 20px; flex-wrap: wrap;">
    <!-- Evelyn’s Image -->
    <img src="images/evelynn.png"
         alt="Evelyn Cross"
         style="max-width: 150px; border-radius: 8px; box-shadow: 0 0 8px rgba(0,0,0,0.3);" />

    <!-- Police Report Table -->
    <table class="table table-sm" style="border-collapse:collapse; flex: 1 1 300px;">
        <colgroup>
            <col style="width: 180px;">  <!-- 👈 set your desired width here -->
            <col>
        </colgroup>
        <tbody>
            <tr>
                <td class="py-0 text-muted pe-2">Victim</td>
                <td class="py-0 align-top"><strong>@currentScenario.VictimName</strong></td>
            </tr>
            <tr>
                <td class="py-0 text-muted pe-2">Cause of Death</td>
                <td class="py-0 align-top"><strong>@currentScenario.CauseOfDeath</strong></td>
            </tr>
            <tr>
                <td class="py-0 text-muted pe-2">Time of Death</td>
                <td class="py-0 align-top"><strong>@currentScenario.TimeOfDeath</strong></td>
            </tr>
            <tr>
                <td class="py-0 text-muted pe-2">Last seen</td>
                <td class="py-0 align-top"><strong>@currentScenario.LastSeen</strong></td>
            </tr>
        </tbody>
    </table>
</div>
<div>
    <hr />
    <p><b>Town Map - Click where would you like to go:</b></p>
</div>
<div class="mb-3">
    <img src="images/map.png"
            usemap="#image-map"
            alt="Larkspur Hollow map" />
</div>

<map name="image-map">
    <area target="" alt="" title="Bakery" href="bakery" coords="331,3,326,97,353,113,415,114,451,82,456,2" shape="poly">
    <area target="" alt="" title="Bank" href="bank" coords="170,1,173,98,259,101,308,76,310,1" shape="poly">
    <area target="" alt="" title="Blacksmith" href="blacksmith" coords="293,291,401,334,401,391,298,393,243,346" shape="poly">
    <area target="" alt="" title="Church" href="church" coords="577,221,454,219,446,342,582,348" shape="poly">
    <area target="" alt="" title="Inn" href="inn" coords="466,5,573,6,585,108,511,112,459,89" shape="poly">
    <area target="" alt="" title="Library" href="library" coords="430,128,457,94,498,111,528,118,549,136,539,218,429,214" shape="poly">
    <area target="" alt="" title="Market" href="market" coords="305,238,406,216,435,244,409,298,354,307,294,283" shape="poly">
    <area target="" alt="" title="Park" href="park" coords="26,295,94,286,143,337,129,377,25,374,8,338" shape="poly">
    <area target="" alt="" title="Post Office" href="postoffice" coords="126,140,153,102,213,102,241,161,214,202,128,201" shape="poly">
    <area target="" alt="" title="School" href="school" coords="109,218,135,204,180,204,214,225,232,286,216,318,120,302,99,263" shape="poly">
    <area target="" alt="" title="Theater" href="theater" coords="37,13,77,2,133,16,153,81,143,100,56,106,12,69" shape="poly">
    <area target="" alt="" title="Town Hall" href="townhall" coords="247,113,246,169,224,193,258,229,330,227,372,214,398,127,340,113,292,93" shape="poly">
</map>

@code {
    private string selectedVoice = "onyx"; // Narrator voice
    private float speed = 0.95f;
    private string? ttsError = null;
    private bool isRendered = false;
    private List<StoryScenario> availableScenarios = new();
    private StoryScenario currentScenario = new();
    private string introText = string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        availableScenarios = ScenarioService.GetAllScenarios();
        currentScenario = ChatState.GetCurrentScenario();
        introText = currentScenario.IntroText + " Interview each character to uncover motives, lies, and secrets — and ultimately identify the killer. The various town residents may help you uncover valuable clues. Good luck!";
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isRendered = true;
        }
        return Task.CompletedTask;
    }
    
    private async Task OnScenarioChanged(ChangeEventArgs e)
    {
        var selectedScenarioId = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedScenarioId) && selectedScenarioId != ChatState.CurrentScenarioId)
        {
            ChatState.LoadScenario(selectedScenarioId);
            currentScenario = ChatState.GetCurrentScenario();
            introText = currentScenario.IntroText + " Interview each character to uncover motives, lies, and secrets — and ultimately identify the killer. The various town residents may help you uncover valuable clues. Good luck!";
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ReadIntro()
    {
        Console.WriteLine("ReadIntro button clicked");
        Console.WriteLine($"Intro text length: {introText?.Length ?? 0}");
        Console.WriteLine($"Voice: {selectedVoice}, Speed: {speed}");
        if (!string.IsNullOrEmpty(introText))
        {
            await PlaySpeech(introText);
        }
    }

    private async Task PlaySpeech(string textToSpeak)
    {
        Console.WriteLine($"PlaySpeech called with text length: {textToSpeak?.Length ?? 0}");
        if (!string.IsNullOrWhiteSpace(textToSpeak) && isRendered)
        {
            try
            {
                Console.WriteLine("Calling StopSpeech...");
                await StopSpeech();
                Console.WriteLine("Calling JS ttsPlayer.play...");
                await JS.InvokeVoidAsync("ttsPlayer.play", textToSpeak, selectedVoice, speed);
                Console.WriteLine("JS ttsPlayer.play completed");
            }
            catch (Exception ex)
            {
                ttsError = $"TTS Error: {ex.Message}";
                Console.WriteLine($"TTS Error: {ex}");
                StateHasChanged();
            }
        }
        else
        {
            Console.WriteLine($"Text to speak is null or whitespace, or not rendered yet. isRendered: {isRendered}");
        }
    }

    private async Task StopSpeech()
    {
        if (!isRendered) return;
        
        try
        {
            await JS.InvokeVoidAsync("ttsPlayer.stop");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error stopping speech: {ex}");
        }
    }

    public void Dispose()
    {
        // Stop any playing audio when navigating away
        if (isRendered)
        {
            Task.Run(async () =>
            {
                try
                {
                    await StopSpeech();
                }
                catch { /* Ignore errors during disposal */ }
            });
        }
    }
}