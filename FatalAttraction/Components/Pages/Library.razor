@page "/library"
@using Microsoft.SemanticKernel
@using Microsoft.SemanticKernel.ChatCompletion
@implements IDisposable
@rendermode InteractiveServer
@inject Kernel Kernel
@inject IChatCompletionService ChatService
@inject FatalAttraction.Services.ChatSessionState ChatState
@inject IJSRuntime JS

<PageTitle>Library</PageTitle>

<h1>Library</h1>

<img src="/images/librarian.png" alt="Mildred Gray" class="img-fluid rounded float-start me-3 mb-2" style="max-width:200px;" />

<p>Talk to the librarian, Ms. Mildred Gray.</p>

<div style="display:flex; flex-direction:column; height:65vh; gap:0.5rem;">
    @if (!string.IsNullOrEmpty(ttsError))
    {
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            @ttsError
            <button type="button" class="btn-close" @onclick="() => ttsError = null"></button>
        </div>
    }
    
    <div style="flex:0 0 auto; display:flex; flex-direction:column; gap:0.25rem;">
        <textarea class="form-control"
          style="flex:1 1 auto; resize:vertical; max-height:20vh;"
          @bind="message"
          @bind:event="oninput"
          @ref="messageInput"
          @onkeydown="HandleKeyDown"
          placeholder="Type your question and click the Ask button..."></textarea>
        <div style="display:flex; gap:0.5rem; justify-content:flex-start;">
            <button class="btn btn-primary" @onclick="Submit">Ask</button>
            <button class="btn btn-secondary" @onclick="ClearMessage">Clear</button>
            <button class="btn btn-danger" @onclick="StopSpeech">Stop Speaking</button>
        </div>
    </div>

    <!-- Two-column region: Conversation (left) + Case Notes (right) -->
    <div style="flex:1 1 auto; display:flex; gap:0.75rem; min-height:0;">
        <!-- Conversation Card -->
        <div class="card shadow-sm" style="flex:2 1 0; display:flex; flex-direction:column; border-radius:0.5rem; min-height:0;">
            <div class="card-header fw-semibold">
                Conversation History:
            </div>
            <div class="card-body" style="overflow:auto; flex:1 1 auto; padding:0.75rem; background-color:#fff;" id="historyContainer">
                @foreach (var (role, content) in convo.AsEnumerable().Reverse())
                {
                    if (role == "system")
                    {
                        <div class="text-muted small mb-2">System: @content</div>
                    }
                    else if (role == "user")
                    {
                        <div class="mb-2"><strong>You:</strong> @((MarkupString)Markdig.Markdown.ToHtml(content))</div>
                    }
                    else
                    {
                        <div class="mb-2"><strong>NPC:</strong> @((MarkupString)Markdig.Markdown.ToHtml(content))</div>
                    }
                }
            </div>
        </div>

        <!-- Case Notes Card -->
        <div class="card shadow-sm" style="flex:1 1 0; display:flex; flex-direction:column; border-radius:0.5rem; min-height:0;">
            <div class="card-header fw-semibold">
                Case Notes:
            </div>
            <div class="card-body" style="display:flex; flex-direction:column; gap:0.5rem; padding:0.75rem;">
                <textarea class="form-control"
                        style="flex:1 1 auto; min-height:8rem; resize:vertical;"
                        @bind="Notes"
                        @bind:event="oninput"
                        placeholder="Write notes you want to see on every page..."></textarea>
            </div>
        </div>
    </div>
</div>

@code {
    private string message = string.Empty;
    private string response = string.Empty;
    ChatHistory history = new();
    private ElementReference messageInput;
    private List<(string role, string content)> convo = new();
    private bool isInteractiveRendered;
    private string Notes
    {
        get => ChatState.Notes;
        set => ChatState.Notes = value ?? string.Empty;
    }
    private string selectedVoice = "shimmer";  @* Female librarian - older woman, higher voice *@
    private float speed = 0.85f;
    private string? ttsError = null;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isInteractiveRendered = true;
        }

        return Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
        // Retrieve any previous conversation
        convo = ChatState.GetOrCreateConvo("librarian");

        // Give shared background
        foreach(var prompt in ChatState.Prompts)
        {
            history.AddSystemMessage(prompt);
        }

        // Set the persona for this character
        history.AddSystemMessage("You are Mildred Gray, the librarian. You love gossip and believe every story hides a little truth. Speak as though you know everyone’s secrets, even when you don’t. Drop hints about an affair between Evelyn and the inn keeper, Lucas Vale.");
    }

    private async Task Submit()
    {
        if (!string.IsNullOrEmpty(message))
        {
            try
            {
                history.AddUserMessage(message);
                convo.Add(("user", message));
                await ClearMessage();

                response = "";
                ttsError = null;
                var chunks = ChatService.GetStreamingChatMessageContentsAsync(history);
                await foreach (var chunk in chunks)
                {
                    response += chunk;
                    StateHasChanged();
                }
                
                history.AddAssistantMessage(response);
                convo.Add(("assistant", response));
                await InvokeAsync(StateHasChanged);
                
                // Play the speech after response is complete
                await PlaySpeech(response);
                
                if (isInteractiveRendered)
                {
                    await messageInput.FocusAsync();
                }
            }
            catch
            {
                convo.Add(("system", "There was an issue processing your message, please try again."));
            }
        }
    }

    private async Task PlaySpeech(string textToSpeak)
    {
        if (!string.IsNullOrWhiteSpace(textToSpeak))
        {
            try
            {
                await JS.InvokeVoidAsync("ttsPlayer.play", textToSpeak, selectedVoice, speed);
            }
            catch (Exception ex)
            {
                ttsError = $"TTS Error: {ex.Message}";
                Console.WriteLine($"TTS Error: {ex}");
                StateHasChanged();
            }
        }
    }

    private async Task StopSpeech()
    {
        try
        {
            await JS.InvokeVoidAsync("ttsPlayer.stop");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Stop TTS Error: {ex}");
        }
    }

    public async void Dispose()
    {
        // Stop audio when navigating away from the page
        await StopSpeech();
    }

    private async Task ClearMessage()
    {
        message = string.Empty;
        await InvokeAsync(StateHasChanged);
        if (isInteractiveRendered)
        {
            await messageInput.FocusAsync();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await Submit();
            await InvokeAsync(StateHasChanged);
        }
    }

    private MarkupString GetResponseMarkup()
    {
        if (string.IsNullOrWhiteSpace(response))
            return new MarkupString(string.Empty);

        var html = Markdig.Markdown.ToHtml(response);
        return new MarkupString(html);
    }
}