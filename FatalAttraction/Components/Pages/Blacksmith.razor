@page "/blacksmith"
@using Microsoft.SemanticKernel
@using Microsoft.SemanticKernel.ChatCompletion
@rendermode InteractiveServer
@inject Kernel Kernel
@inject IChatCompletionService ChatService

<PageTitle>Blacksmith</PageTitle>

<h1>Blacksmith</h1>

<img src="/images/smithy.png" alt="Hugo Brandt" class="img-fluid rounded float-start me-3 mb-2" style="max-width:200px;" />

<p>Talk to the blacksmith, Mr. Hugo Brandt.</p>

<div style="display:flex; flex-direction:column; height:65vh; gap:0.5rem;">
    <div style="flex:0 0 auto; display:flex; flex-direction:column; gap:0.25rem;">
        <textarea class="form-control"
          style="flex:1 1 auto; resize:vertical; max-height:20vh;"
          @bind="message"
          @bind:event="oninput"
          @ref="messageInput"
          @onkeydown="HandleKeyDown"
          placeholder="Type your question and click the Ask button..."></textarea>
        <div style="display:flex; gap:0.5rem; justify-content:flex-start;">
            <button class="btn btn-primary" style="white-space:nowrap;" @onclick="Submit">Ask</button>
            <button class="btn btn-secondary" style="white-space:nowrap;" @onclick="ClearMessage">Clear</button>
        </div>
    </div>

    <div style="flex:1 1 auto; overflow:auto; border:1px solid rgba(0,0,0,0.06); padding:0.5rem; border-radius:0.25rem; background:#fff;" id="historyContainer">
        @* Render the full conversation history from the local convo list *@
        @foreach (var (role, content) in convo.AsEnumerable().Reverse())
        {
            if (role == "system")
            {
                <div class="text-muted small mb-2">System: @content</div>
            }
            else if (role == "user")
            {
                <div class="mb-2"><strong>You:</strong> @((MarkupString)Markdig.Markdown.ToHtml(content))</div>
            }
            else
            {
                <div class="mb-2"><strong>NPC:</strong> @((MarkupString)Markdig.Markdown.ToHtml(content))</div>
            }
        }
    </div>
</div>

@code {
    private string message = string.Empty;
    private string response = string.Empty;
    ChatHistory history = new();
    private List<(string role, string content)> convo = new();
    private ElementReference messageInput;
    private bool isInteractiveRendered;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isInteractiveRendered = true;
        }

        return Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
        // Give background info about the murder
        history.AddSystemMessage("In the quiet town of Larkspur Hollow, an attractive little town, the body of Evelyn Cross, a beloved actress who once performed at the local theater, is found dead in the park at dawn. The townsfolk whisper it was a crime of passion — but everyone seems to have been attracted to Evelyn in some way, and everyone’s hiding something. The player must interview each character to uncover motives, lies, and secrets — and ultimately identify the killer. Cause of Death: Blunt trauma to the head. Time of Death: Between 9 PM and midnight. Last seen: Leaving the Theater after rehearsal. Theme: Each suspect’s “attraction” (romantic, financial, power, or admiration) drove their behavior.");

        // Set the persona for this character
        history.AddSystemMessage("You are Hugo Brandt, the blacksmith. You’re rough around the edges but not evil. You owed Evelyn money; she threatened to expose your unpaid debt to the mayor, Beatrice Langford. You’ll get angry if accused, but drop a clue about a missing wrench.");
    }

    private async Task Submit()
    {
        history.AddUserMessage(message);
        convo.Add(("user", message));
        if (!string.IsNullOrEmpty(message))
        {
            response = "";
            var chunks = ChatService.GetStreamingChatMessageContentsAsync(history);
            await foreach (var chunk in chunks)
            {
                response += chunk;
                StateHasChanged();
            }
            history.AddAssistantMessage(response);
            convo.Add(("assistant", response));
            await InvokeAsync(StateHasChanged);
            if (isInteractiveRendered)
            {
                await messageInput.FocusAsync();
            }

            await ClearMessage();
        }
    }

    private async Task ClearMessage()
    {
        message = string.Empty;
        await InvokeAsync(StateHasChanged);
        if (isInteractiveRendered)
        {
            await messageInput.FocusAsync();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await Submit();
            await InvokeAsync(StateHasChanged);
        }
    }

    private MarkupString GetResponseMarkup()
    {
        if (string.IsNullOrWhiteSpace(response))
            return new MarkupString(string.Empty);

        var html = Markdig.Markdown.ToHtml(response);
        return new MarkupString(html);
    }
}