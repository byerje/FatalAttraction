@page "/bank"
@using Microsoft.SemanticKernel
@using Microsoft.SemanticKernel.ChatCompletion
@rendermode InteractiveServer
@inject Kernel Kernel
@inject IChatCompletionService ChatService

<PageTitle>Bank</PageTitle>

<h1>Bank</h1>

<img src="/images/banker.png" alt="Martin Harlow" class="img-fluid rounded float-start me-3 mb-2" style="max-width:200px;" />

<p>Talk to the banker, Mr. Martin Harlow.</p>

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Question</h5>
        <textarea class="form-control" @bind="@message" @ref="messageInput" @onkeydown="HandleKeyDown"></textarea>
        <button class="btn btn-primary mt-2" @onclick="Submit">Ask</button>
        <button class="btn btn-secondary mt-2 ms-2" @onclick="ClearMessage">Clear</button>
    </div>
</div>

<div class="card mt-3">
    <div class="card-body">
        <h5 class="card-title">Response</h5>
        <div>@(GetResponseMarkup())</div>
    </div>
</div>

@code {
    private string message = string.Empty;
    private string response = string.Empty;
    ChatHistory history = new();
    private ElementReference messageInput;
    private bool isInteractiveRendered;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isInteractiveRendered = true;
        }

        return Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
        // Set the persona for this character
        history.AddSystemMessage("You are Martin Harlow, the town banker in Larkspur Hollow. You’re polite and professional, but nervous when Evelyn Cross’s name comes up. You had a secret attraction to her and manipulated the bank books to approve her theater loan. When questioned, deny impropriety at first but reveal, if pressed, that she was upset with the mayor, Beatrice Langford, earlier that day.");
    }

    private async Task Submit()
    {
        history.AddUserMessage(message);
        if (!string.IsNullOrEmpty(message))
        {
            response = "";
            var chunks = ChatService.GetStreamingChatMessageContentsAsync(history);
            await foreach (var chunk in chunks)
            {
                response += chunk;
                StateHasChanged();
            }
            history.AddAssistantMessage(response);
            await InvokeAsync(StateHasChanged);
            if (isInteractiveRendered)
            {
                await messageInput.FocusAsync();
            }
        }
    }

        private async Task ClearMessage()
    {
        message = string.Empty;
        await InvokeAsync(StateHasChanged);
        if (isInteractiveRendered)
        {
            await messageInput.FocusAsync();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await Submit();
            await InvokeAsync(StateHasChanged);
        }
    }

    private MarkupString GetResponseMarkup()
    {
        if (string.IsNullOrWhiteSpace(response))
            return new MarkupString(string.Empty);

        var html = Markdig.Markdown.ToHtml(response);
        return new MarkupString(html);
    }
}